Algoritmo:
Começar por limitador de espaço.
Se tiver aspas e anterior nao tiver
	Mudar delimitador
	Copiar até encontrar delimitador
	Se flag de aspas tiver a 0, mudar para 1
Se tiver aspas e na anterior tiver aspas -> Concatenar com anterior
	Mudar delimitador
	Copiar ate encontrar delimitador
Se nao tiver aspas
	Copiar palavra ate encontrar espaço
	Se flag de aspas tiver a 1, mudar para 0


TESTES:
1 - echo Hello          World
2 - echo "Hello          World"
3 - echo "Hello     ''     World"
4 - echo "Hello     ""     World"
5 - echo "Hello   'abc  '""     World"
6 - echo "Hello   'abc  ""'     World"
7 - echo "Hello   'abc"  "'     World"
8 - echo "Hello   'abc"  "'     World'
9 - echo "Hello   abc"  '     World'
10 - echo "Hello  ' abc"  '   "  World'
11 - echo "Hello  '" "abc"  '   "  World'


IDEIAS para implementar.

Criar estrutura principal para albergar todas as outras necessarias por uma questao de acesso e menos uso de declaracao
de variaveis no codigo.


Fazer contagem de elementos:
-> Comandos; Ajuda na alocacao de N estruturas de comandos.
-> Pipes; Na validacao da linha. Para cada pipe, COMANDOS = N pipes + 1. E abertura de pipes antes dos forks.
-> redirects.
-> appends.

Quando pode ser um infile como primeiro. PROBLEMA: TOKEN -> FILES sao TOKEN_WORDS.
- Para ser um ficheiro como primeiro TOKEN, antes do ficheiro tem que vir um REDIRECT, APPEND, HERE_DOC.
- Ou mudamos, na atribuicao de TOKENS ou mudo na atribuicao de comandos.

Criacao de lista linkada com estrutura a representar o comando NAO esta feita.
- O que pode e tem que ser feito ainda, mas mais para a parte da execuçao?
- Criar campo na estrutura *t_cmd para receber stdion e stdout file descriptores caso haja
redireccionamento de dados para pipes ou ficheiros, através da execucao de comandos.

Resumo: 3 coisas importantes para falar com o Tiago:

- Falar sobre criar uma estrutura principal na "minishell.h" que tem acesso as outras estruturas dentro dos respectivos headers,
por uma questao de organizacao e acesso dentro de outros ficheiros.
- 

Para fazer:
- Receber TOKENS
- Construir lista estrutura t_cmd
- Valido a linha

Parser:

Recebe os tokens do lexer.

Analisa a sintaxe.

Constrói uma estrutura lógica dos comandos (ex: t_command *, árvore binária, etc.)

Verifica erros de sintaxe.

